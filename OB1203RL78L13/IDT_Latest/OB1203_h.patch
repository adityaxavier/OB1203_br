--- IDT_Latest/OB1203.h	Mon Mar 18 15:46:58 2019
+++ OB1203/OB1203.h	Mon Mar 18 13:06:23 2019
@@ -4,3 +4,5 @@
-#include "mbed.h"
-//#include "SoftI2C.h"
-
+#if defined(__CA78K0R__) || defined(__CCRL__) || defined(__ICCRL78__) 
+#include "r_cg_macrodriver.h"
+#include "r_cg_iica.h"
+#include "r_cg_userdefine.h"
+#endif //#if defined(__CA78K0R__) || defined(__CCRL__) || defined(__ICCRL78__) 
@@ -185,0 +188 @@
+
@@ -188,2 +191 @@ class OB1203
-    I2C *i2c;
-
+  uint8_t i2c_addr;
@@ -191,61 +193,3 @@ class OB1203
-    char osc_trim;
-    char ls_res;
-    char ls_rate;
-    char ls_gain;
-    uint32_t ls_thres_hi;
-    uint32_t ls_thres_lo;
-    char ls_sai;
-    char ls_mode;
-    char ls_en;
-    char ls_int_sel;
-    char ls_var_mode;
-    char ps_sai_en;
-    char temp_en;
-    char ppg_ps_mode;
-    char ppg_ps_en;
-    char ps_can_ana;
-    char afull_int_en;
-    char ppg_int_en;
-    char ps_logic_mode;
-    uint16_t ps_digital_can;
-    char ps_int_en;
-    char ls_persist;
-    char ps_persist;
-    uint16_t ps_thres_hi;
-    uint16_t ps_thres_lo;
-    uint16_t ps_current;
-    uint16_t ir_current;
-    uint16_t r_current;
-    char ppg_ps_gain;
-    char ppg_pow_save;
-    char led_flip;
-    char ch1_can_ana;
-    char ch2_can_ana;
-    char ppg_avg;
-    char ppg_pwidth;
-    char ppg_freq;
-    char ppg_rate;
-    char ppg_LED_settling;
-    char ppg_ALC_track;
-    char ps_pulses;
-    char ps_pwidth;
-    char ps_rate;
-    char ps_avg_en;
-    char ps_hys_level;
-    char ls_int_en;
-    char fifo_rollover_en;
-    char fifo_afull_advance_warning;
-    char writePointer;
-    char readPointer;
-    char fifoOverflow;
-    char bio_trim;
-    char led_trim;
-    char diff;
-    char alc;
-    char sig_out;
-    volatile bool ir_in_range;
-    volatile bool r_in_range;
-    volatile bool prev_in_range;
-    volatile bool updateFastMode;
-    volatile bool updateCurrent;
-    OB1203 (I2C *);
+  
+  static OB1203 * current;
+  MD_STATUS i2c_error;
@@ -253,8 +197,65 @@ class OB1203
-    // Low-level operations
-    void reset();
-    uint16_t get_status();
-    void writeRegister(int, char, char);
-    void writeBlock(int, char, char *, char);
-    void readBlock(int, char, char *, int);
-    uint32_t bytes2uint32(char *, int);
-    uint32_t twoandhalfBytes2uint32(char *, int); 
+  bool ready;
+  
+  static volatile bool busy;
+  static void callback(void);
+  
+  char osc_trim;
+  char ls_res;
+  char ls_rate;
+  char ls_gain;
+  uint32_t ls_thres_hi;
+  uint32_t ls_thres_lo;
+  char ls_sai;
+  char ls_mode;
+  char ls_en;
+  char ls_int_sel;
+  char ls_var_mode;
+  char ps_sai_en;
+  char temp_en;
+  char ppg_ps_mode;
+  char ppg_ps_en;
+  char ps_can_ana;
+  char afull_int_en;
+  char ppg_int_en;
+  char ps_logic_mode;
+  uint16_t ps_digital_can;
+  char ps_int_en;
+  char ls_persist;
+  char ps_persist;
+  uint16_t ps_thres_hi;
+  uint16_t ps_thres_lo;
+  uint16_t ps_current;
+  uint16_t ir_current;
+  uint16_t r_current;
+  char ppg_ps_gain;
+  char ppg_pow_save;
+  char led_flip;
+  char ch1_can_ana;
+  char ch2_can_ana;
+  char ppg_avg;
+  char ppg_pwidth;
+  char ppg_freq;
+  char ppg_rate;
+  char ppg_LED_settling;
+  char ppg_ALC_track;
+  char ps_pulses;
+  char ps_pwidth;
+  char ps_rate;
+  char ps_avg_en;
+  char ps_hys_level;
+  char ls_int_en;
+  char fifo_rollover_en;
+  char fifo_afull_advance_warning;
+  char writePointer;
+  char readPointer;
+  char fifoOverflow;
+  char bio_trim;
+  char led_trim;
+  char diff;
+  char alc;
+  char sig_out;
+  volatile bool ir_in_range;
+  volatile bool r_in_range;
+  volatile bool prev_in_range;
+  volatile bool updateFastMode;
+  volatile bool updateCurrent;
@@ -262,34 +263 @@ class OB1203
-    // High-level operations
-    void setOscTrim();
-    bool dataIsNew();
-    bool lsIsNew();
-    bool psIsNew();
-    bool tempIsNew();
-    bool bioIsNew();
-    void setMainConfig();
-    void setIntConfig();
-    void setLSthresh();
-    void setPSthresh();
-    void setPScurrent();
-    void setPPGcurrent();
-    void setPPG_PSgain_cfg();
-    void setPPGana_can();
-    void setDigitalCan();
-    void setPPGavg_and_rate();
-    void setFifoConfig();
-    void setBioTrim();
-    void setLEDTrim();
-    char get_ps_data(uint32_t *);
-    char get_ls_data(uint32_t *);
-    char get_ps_ls_data(uint32_t *);
-    void resetFIFO();
-    void init_ps();
-    void init_rgb();
-    void init_ps_rgb();
-    void init_hr();
-    void init_spo2();
-    void getFifoInfo(char *fifo_info);
-    void getNumFifoSamplesAvailable(char *fifo_info, char *sample_info);
-    void getFifoSamples(uint8_t, char *);
-    void parseFifoSamples(char, char *, uint32_t *);
-    char get_part_ID(char *);
+  OB1203 (uint8_t addr = OB1203_ADDR);
@@ -296,0 +265,41 @@ class OB1203
+  // Low-level operations
+  void reset();
+  uint16_t get_status();
+  void writeRegister(int, char, char);
+  void writeBlock(int, char, char *, char);
+  void readBlock(int, char, char *, int);
+  uint32_t bytes2uint32(char *, int);
+  uint32_t twoandhalfBytes2uint32(char *, int); 
+  
+  // High-level operations
+  void setOscTrim();
+  bool dataIsNew();
+  bool lsIsNew();
+  bool psIsNew();
+  bool tempIsNew();
+  bool bioIsNew();
+  void setMainConfig();
+  void setIntConfig();
+  void setLSthresh();
+  void setPSthresh();
+  void setPScurrent();
+  void setPPGcurrent();
+  void setPPG_PSgain_cfg();
+  void setPPGana_can();
+  void setDigitalCan();
+  void setPPGavg_and_rate();
+  void setFifoConfig();
+  void setBioTrim();
+  void setLEDTrim();
+  char get_ps_data(uint32_t *);
+  char get_ls_data(uint32_t *);
+  char get_ps_ls_data(uint32_t *);
+  void resetFIFO();
+  void init_ps();
+  void init_rgb();
+  void init_ps_rgb();
+  void init_hr();
+  void init_spo2();
+  void getFifoInfo(char *fifo_info);
+  uint8_t getNumFifoSamplesAvailable();
+  void getNumFifoSamplesAvailable(char *fifo_info, char *sample_info);
@@ -298,15 +307,17 @@ class OB1203
-    //agc functions
-    void do_agc(uint32_t,bool);
-    
-    //variables
-    uint16_t rate;
-    char res;
-    char gain;
-    uint32_t data_max;
-    uint32_t reg_max;
-    
-
-//    const uint32_t targetCounts[2];
-
-
-
+  void getFifoSamples(uint8_t, char *);
+  void parseFifoSamples(char, char *, uint32_t *);
+  char get_part_ID(char *);
+  
+  
+  //agc functions
+  void do_agc(uint32_t,bool);
+  
+  //variables
+  uint16_t rate;
+  char res;
+  char gain;
+  uint32_t data_max;
+  uint32_t reg_max;
+  
+  
+  //    const uint32_t targetCounts[2];  
